import React, { useEffect, useState } from 'react';

function App() {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [newPost, setNewPost] = useState({ title: '', body: '' }); // State for new post input

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        setPosts(data);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  // Function to handle form submission
  const handleSubmit = async (event) => {
    event.preventDefault(); // Prevent the default form submission behavior

    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
        method: 'POST', // Specify POST method
        headers: {
          'Content-Type': 'application/json', // Set content type to JSON
        },
        body: JSON.stringify(newPost), // Convert newPost object to JSON string
      });

      if (!response.ok) {
        throw new Error('Failed to create a post');
      }

      const data = await response.json(); // Get the response data
      setPosts([...posts, data]); // Add the new post to the existing posts
      setNewPost({ title: '', body: '' }); // Reset the form fields
    } catch (error) {
      setError(error.message);
    }
  };

  // Handle changes in the form inputs
  const handleChange = (event) => {
    const { name, value } = event.target; // Get input name and value
    setNewPost((prevPost) => ({ ...prevPost, [name]: value })); // Update the respective field in newPost
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div>
      <h1>Posts</h1>
      <ul>
        {posts.map(post => (
          <li key={post.id}>
            <h2>{post.title}</h2>
            <p>{post.body}</p>
          </li>
        ))}
      </ul>

      <h2>Add a New Post</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          name="title"
          placeholder="Post Title"
          value={newPost.title}
          onChange={handleChange} // Update state on input change
          required
        />
        <textarea
          name="body"
          placeholder="Post Body"
          value={newPost.body}
          onChange={handleChange} // Update state on input change
          required
        />
        <button type="submit">Submit</button>
      </form>
    </div>
  );
}

export default App;
